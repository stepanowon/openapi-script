** 72p
DROP TABLE contact;

CREATE TABLE contact 
(
   no 	BIGINT GENERATED BY DEFAULT AS IDENTITY,
   name     VARCHAR2(20)  NOT NULL,
   tel     	VARCHAR2(30)  NOT NULL,   
   address  VARCHAR2(200)  
);



** 76p
# datasource 
spring.datasource.url=jdbc:h2:tcp://localhost/~/test
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver

# mybatis config, mapper
mybatis.config-location: classpath:mybatis-config.xml
mybatis.mapper-locations=mapper/**/*.xml

#Encoding UTf-8
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.enabled=true
server.servlet.encoding.force=true
server.servlet.encoding.force-request=true
server.servlet.encoding.force-response=true

# Thymeleaf setting
spring.thymeleaf.cache=false
spring.thymeleaf.encoding=utf-8


** 78p
package com.multi.contactsapp.domain;
public class Contact {
	private long no;
	private String name;
	private String tel;
	private String address;
	//생성자, Setter, Getter 자동 생성
}


**79p
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
   <typeAliases>
      <typeAlias type="com.multi.contactsapp.domain.Contact" alias="Contact"/>
   </typeAliases> 
</configuration>


**80p
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper 
   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="contact">
   <select id="selectall" resultType="Contact">
      SELECT no, name, tel, address  
      FROM contact  
      ORDER BY no DESC
   </select>
   <select id="selectone" parameterType="Contact"
      resultType="Contact">
      SELECT no, name, tel, address 
      FROM contact WHERE no=#{no}
   </select>
   <select id="selectcnt" resultType="int">
      SELECT count(*) FROM contact
   </select>
   <update id="update" parameterType="Contact">
      UPDATE contact 
      SET name=#{name}, tel=#{tel}, address=#{address} 
      WHERE no=#{no}
   </update>
   <delete id="delete" parameterType="Contact">
      DELETE contact WHERE no=#{no}
   </delete>
   <insert id="insert" parameterType="Contact" 
          useGeneratedKeys="true" keyProperty="no">
      INSERT INTO contact (name, tel, address)
         VALUES (#{name}, #{tel}, #{address})
   </insert>
</mapper>


**81p
package com.multi.contactsapp.dao;
......
@Repository
public class ContactDAO {

   @Autowired
   private SqlSession sqlSession;

   public List<Contact> getContactList() {
      return sqlSession.selectList("contact.selectall");
   }

   public List<Contact> getContactList(int pageNo, int pageSize) {
      int offset = (pageNo-1)*pageSize;
      int limit = pageSize;
      return sqlSession.selectList("contact.selectall",  null, new RowBounds(offset, limit));
   }
	
   public int getContactCount() {
      return sqlSession.selectOne("contact.selectcnt");
   }
   public Contact getContactOne(Contact c) {
      return sqlSession.selectOne("contact.selectone", c);
   }
	
   public long insertContact(Contact c) {
      sqlSession.insert("contact.insert", c);
      return c.getNo();
   }
	
   public int updateContact(Contact c) {
      return sqlSession.update("contact.update", c);
   }
	
   public int deleteContact(Contact c) {
      return sqlSession.delete("contact.delete", c);
   }
}


** 83p
package com.multi.contactsapp.service;
......
@Service
public class ContactService {
   @Autowired
   private ContactDAO contactDAO;
   public List<Contact> getContactList() {
      return contactDAO.getContactList();
   }
   public List<Contact> getContactList(int pageNo, int pageSize) {
      return contactDAO.getContactList(pageNo, pageSize);
   }	
   public Contact getContactOne(Contact c) {
      return contactDAO.getContactOne(c);
   }
   public long insertContact(Contact c) {
      return contactDAO.insertContact(c);
   }
   public int updateContact(Contact c) {
       return contactDAO.updateContact(c);
   }	
   public int deleteContact(Contact c) {
       return contactDAO.deleteContact(c);
   }
}



** 85p

@Controller
@RequestMapping(value=“/contacts”)
public class ContactController {
	@Autowired
	private ContactService contactService;
	
	@GetMapping()
	public void getContactList(Model model) {
		List<Contact> contacts = contactService.getContactList();
		model.addAttribute("contacts", contacts);
	}
	
	@PostMapping("add")
	public String  insertContact(Contact c) {
		contactService.insertContact(c);
		return "redirect:/contacts";
	}
	
	@PostMapping("update")
	public String  updateContact(Contact c) {
		contactService.updateContact(c);
		return "redirect:/contacts";
	}
}


** 86p
<html xmlns:th="http://www.thymeleaf.org">
<head>
  <meta charset="utf-8">
  <title>목록 화면</title>
  <style>
   table.mytable { width:500px; }
   table.mytable > thead { 	background-color: aqua; }
   table.mytable > tbody  td { border-bottom: solid 1px gray; padding:3px 10px 3px 10px; }
   div.myinput { padding-bottom: 3px; }
   div.box { padding: 20px; }
  </style>
  <script type="text/javascript" src="https://code.jquery.com/jquery.js"></script>
  <script type="text/javascript">
  $(function() {
    $("#add").click(function() {
      $("#no").val("0");
      $("#f1")[0].submit();
    })
    $("#update").click(function() {
      $("#f1")[0].action = "/contacts/update";
      $("#f1")[0].submit();
    })
  })
  </script>
</head>
<body>
  <div>
    <div class="box">
      <form id="f1" method="post" action="/contacts/add">
        <div class="myinput">번호 : <input type="text" id="no" name="no" /></div>
        <div class="myinput">이름 : <input type="text" id="name" name="name" /></div>
        <div class="myinput">전화 : <input type="text" id="tel" name="tel" /></div>
        <div class="myinput">주소 : <input type="text" id="address" name="address" /></div>
      </form> 
      <button id="add">추가</button>
      <button id="update">수정</button>
    </div>
    <div  style="margin:10px 10px 10px 10px; ">
      <table class="mytable">
        <thead>
          <tr>
            <th>번호</th>
            <th>성명</th>
            <th>전화</th>
            <th>주소</th>
          </tr>
       </thead>
       <tbody>
          <tr th:each="c : ${contacts}">
            <td th:text="${c.no}" />
            <td th:text="${c.name}" />
            <td th:text="${c.tel}" />
            <td th:text="${c.address}" />
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</body>
</html>























